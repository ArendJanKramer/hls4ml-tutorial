
FROM buildpack-deps:bionic

# avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set up locales properly
RUN apt-get -qq update && \
    apt-get -qq install --yes --no-install-recommends locales > /dev/null && \
    apt-get -qq purge && \
    apt-get -qq clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# Use bash as default shell, rather than sh
ENV SHELL /bin/bash

# Set up user
ARG NB_USER
ARG NB_UID
ENV USER ${NB_USER}
ENV HOME /home/${NB_USER}

RUN groupadd \
        --gid ${NB_UID} \
        ${NB_USER} && \
    useradd \
        --comment "Default user" \
        --create-home \
        --gid ${NB_UID} \
        --no-log-init \
        --shell /bin/bash \
        --uid ${NB_UID} \
        ${NB_USER}

RUN wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key |  apt-key add - && \
    DISTRO="bionic" && \
    echo "deb https://deb.nodesource.com/node_10.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list && \
    echo "deb-src https://deb.nodesource.com/node_10.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list

# Base package installs are not super interesting to users, so hide their outputs
# If install fails for some reason, errors will still be printed
RUN apt-get -qq update && \
    apt-get -qq install --yes --no-install-recommends \
       less \
       nodejs \
       unzip \
       > /dev/null && \
    apt-get -qq purge && \
    apt-get -qq clean && \
    rm -rf /var/lib/apt/lists/*

EXPOSE 8888

# Environment variables required for build
ENV APP_BASE /srv
ENV NPM_DIR ${APP_BASE}/npm
ENV NPM_CONFIG_GLOBALCONFIG ${NPM_DIR}/npmrc
ENV CONDA_DIR ${APP_BASE}/conda
ENV NB_PYTHON_PREFIX ${CONDA_DIR}/envs/notebook
ENV KERNEL_PYTHON_PREFIX ${NB_PYTHON_PREFIX}
# Special case PATH
ENV PATH ${NB_PYTHON_PREFIX}/bin:${CONDA_DIR}/bin:${NPM_DIR}/bin:${PATH}
# If scripts required during build are present, copy them

COPY docker/activate-conda.sh /etc/profile.d/activate-conda.sh
#COPY build_script_files/-2fhome-2fsioni-2fwork-2fhls4ml-2frepo2docker-2frepo2docker-2fbuildpacks-2fconda-2factivate-2dconda-2esh-23d9f2 /etc/profile.d/activate-conda.sh

COPY environment.yml /tmp/environment.yml
#COPY build_script_files/-2fhome-2fsioni-2fwork-2fhls4ml-2frepo2docker-2frepo2docker-2fbuildpacks-2fconda-2fenvironment-2epy-2d3-2e7-2efrozen-2eyml-618176 /tmp/environment.yml

COPY docker/install-miniforge.bash /tmp/install-miniforge.bash
#COPY build_script_files/-2fhome-2fsioni-2fwork-2fhls4ml-2frepo2docker-2frepo2docker-2fbuildpacks-2fconda-2finstall-2dminiforge-2ebash-5530e3 /tmp/install-miniforge.bash
RUN mkdir -p ${NPM_DIR} && \
chown -R ${NB_USER}:${NB_USER} ${NPM_DIR}

USER ${NB_USER}
RUN npm config --global set prefix ${NPM_DIR}

USER root
RUN bash /tmp/install-miniforge.bash && \
rm /tmp/install-miniforge.bash /tmp/environment.yml

# Allow target path repo is cloned to be configurable
#ARG REPO_DIR=/tmp/tutorial
ARG REPO_DIR=${HOME}
#RUN mkdir ${REPO_DIR}
ENV REPO_DIR ${REPO_DIR}
WORKDIR ${REPO_DIR}

# We want to allow two things:
#   1. If there's a .local/bin directory in the repo, things there
#      should automatically be in path
#   2. postBuild and users should be able to install things into ~/.local/bin
#      and have them be automatically in path
#
# The XDG standard suggests ~/.local/bin as the path for local user-specific
# installs. See https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
ENV PATH ${HOME}/.local/bin:${REPO_DIR}/.local/bin:${PATH}

# The rest of the environment
ENV CONDA_DEFAULT_ENV ${KERNEL_PYTHON_PREFIX}
# Run pre-assemble scripts! These are instructions that depend on the content
# of the repository but don't access any files in the repository. By executing
# them before copying the repository itself we can cache these steps. For
# example installing APT packages.
# If scripts required during build are present, copy them

#COPY src/environment.yml ${REPO_DIR}/environment.yml
USER root
RUN chown -R ${NB_USER}:${NB_USER} ${REPO_DIR}
USER ${NB_USER}
COPY environment.yml /tmp/environment.yml
RUN conda env update -p ${NB_PYTHON_PREFIX} -f "/tmp/environment.yml" && \
    conda clean --all -f -y && \
    conda list -p ${NB_PYTHON_PREFIX}
COPY *py* ${HOME}/
COPY images ${HOME}/images/
COPY pruned_cnn ${HOME}/pruned_cnn/ 
COPY quantized_pruned_cnn ${HOME}/quantized_pruned_cnn/
COPY *py* /tmp/
COPY images /tmp/images/
COPY pruned_cnn /tmp/pruned_cnn/
COPY quantized_pruned_cnn /tmp/quantized_pruned_cnn/

# Copy and chown stuff. This doubles the size of the repo, because
# you can't actually copy as USER, only as root! Thanks, Docker!
USER root
COPY docker/vivado_cfg.txt /tmp/vivado_cfg.txt
RUN wget https://www.dropbox.com/s/wvp50u7h2jroict/vivado.tar.gz?dl=1 -O vivado.tar.gz && \
    tar -xzf vivado.tar.gz && \
    cd Xilinx_Vivado_2019.2_1106_2127 && \
    ./xsetup --agree XilinxEULA,3rdPartyEULA,WebTalkTerms --batch Install --config /tmp/vivado_cfg.txt && \
    cd .. && \
    rm -r Xilinx_Vivado_2019.2_1106_2127 && \
    rm vivado.tar.gz && \
    rm /tmp/vivado_cfg.txt
# Install the pynq-z2 board files
RUN wget https://www.dropbox.com/s/meufyrhgcg38i12/pynq-z2.zip?dl=1 -O pynq-z2.zip && \
    unzip pynq-z2.zip && \
    rm pynq-z2.zip && \
    mv pynq-z2 /opt/Xilinx/Vivado/2019.2/data/boards/board_files/
# Apply Vivado's y2k22 patch
RUN wget https://www.dropbox.com/s/3gv1jq9074d582o/y2k22_patch.zip?dl=1 -O y2k22_patch.zip && \
    mv y2k22_patch.zip /opt/Xilinx && \
    cd /opt/Xilinx && \
    unzip y2k22_patch.zip && \
    python y2k22_patch/patch.py
#COPY src/ ${REPO_DIR}
#RUN chown -R ${NB_USER}:${NB_USER} ${REPO_DIR}

# Run assemble scripts! These will actually turn the specification
# in the repository into an image.


# Container image Labels!
# Put these at the end, since we don't want to rebuild everything
# when these change! Did I mention I hate Dockerfile cache semantics?

LABEL repo2docker.ref="None"
LABEL repo2docker.repo="local"
LABEL repo2docker.version="0.11.0+107.g47c456c"

# Add Tini
ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "--"]

# We always want containers to run as non-root
USER ${NB_USER}
# Specify the default command to run
CMD ["jupyter", "notebook", "--ip", "0.0.0.0"]


